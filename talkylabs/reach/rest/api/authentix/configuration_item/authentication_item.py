r"""
    This code was generated by
  ___ ___   _   ___ _  _    _____ _   _    _  ___   ___      _   ___ ___      ___   _   ___     ___ ___ _  _ ___ ___    _ _____ ___  ___ 
 | _ \ __| /_\ / __| || |__|_   _/_\ | |  | |/ | \ / / |    /_\ | _ ) __|___ / _ \ /_\ |_ _|__ / __| __| \| | __| _ \  /_\_   _/ _ \| _ \
 |   / _| / _ \ (__| __ |___|| |/ _ \| |__| ' < \ V /| |__ / _ \| _ \__ \___| (_) / _ \ | |___| (_ | _|| .` | _||   / / _ \| || (_) |   /
 |_|_\___/_/ \_\___|_||_|    |_/_/ \_\____|_|\_\ |_| |____/_/ \_\___/___/    \___/_/ \_\___|   \___|___|_|\_|___|_|_\/_/ \_\_| \___/|_|_\
 
    Reach Authentix API
     Reach Authentix API helps you easily integrate user authentification in your application. The authentification allows to verify that a user is indeed at the origin of a request from your application.  At the moment, the Reach Authentix API supports the following channels:    * SMS      * Email   We are continuously working to add additionnal channels. ## Base URL All endpoints described in this documentation are relative to the following base URL: ``` https://api.reach.talkylabs.com/rest/authentix/v1/ ```  The API is provided over HTTPS protocol to ensure data privacy.  ## API Authentication Requests made to the API must be authenticated. You need to provide the `ApiUser` and `ApiKey` associated with your applet. This information could be found in the settings of the applet. ```curl curl -X GET [BASE_URL]/configurations -H \"ApiUser:[Your_Api_User]\" -H \"ApiKey:[Your_Api_Key]\" ``` ## Reach Authentix API Workflow Three steps are needed in order to authenticate a given user using the Reach Authentix API. ### Step 1: Create an Authentix configuration A configuration is a set of settings used to define and send an authentication code to a user. This includes, for example: ```   - the length of the authentication code,    - the message template,    - and so on... ``` A configuaration could be created via the web application or directly using the Reach Authentix API. This step does not need to be performed every time one wants to use the Reach Authentix API. Indeed, once created, a configuartion could be used to authenticate several users in the future.    ### Step 2: Send an authentication code A configuration is used to send an authentication code via a selected channel to a user. For now, the supported channels are `sms`, and `email`. We are working hard to support additional channels. Newly created authentications will have a status of `awaiting`. ### Step 3: Verify the authentication code This step allows to verify that the code submitted by the user matched the one sent previously. If, there is a match, then the status of the authentication changes from `awaiting` to `passed`. Otherwise, the status remains `awaiting` until either it is verified or it expires. In the latter case, the status becomes `expired`. 

    NOTE: This class is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
    Do not edit the class manually.
"""


from datetime import date, datetime
from decimal import Decimal
from typing import Any, Dict, List, Optional, Union, Iterator, AsyncIterator
from talkylabs.reach.base import deserialize, serialize, values
from talkylabs.reach.base.instance_context import InstanceContext
from talkylabs.reach.base.instance_resource import InstanceResource
from talkylabs.reach.base.list_resource import ListResource
from talkylabs.reach.base.version import Version
from talkylabs.reach.base.page import Page


class AuthenticationItemInstance(InstanceResource):

    """
    :ivar appletId: The identifier of the applet.
    :ivar apiVersion: The API version.
    :ivar configurationId: The identifier of the configuration.
    :ivar authenticationId: The identifier of the authentication.
    :ivar status: The status of the authentication.
    :ivar dest: The destination of the authentication code. Phone numbers must be in E.164 format.
    :ivar channel: The channel used.
    :ivar expiryTime: An expiry time in minutes. 
    :ivar maxTrials: The maximum number of trials. 
    :ivar maxControls: The maximum number of code controls. 
    :ivar paymentInfo: 
    :ivar trials: An array of authentication trials containing channel-specific information about each trial.
    :ivar dateCreated: The date and time in GMT that the authentication was created. 
    :ivar dateUpdated: The date and time in GMT that the authentication was last updated. 
    """

    def __init__(self, version: Version, payload: Dict[str, Any], configuration_id: str, authentication_id: Optional[str] = None):
        super().__init__(version)

        
        self.appletId: Optional[str] = payload.get("appletId")
        self.apiVersion: Optional[str] = payload.get("apiVersion")
        self.configurationId: Optional[str] = payload.get("configurationId")
        self.authenticationId: Optional[str] = payload.get("authenticationId")
        self.status: Optional[str] = payload.get("status")
        self.dest: Optional[str] = payload.get("dest")
        self.channel: Optional[str] = payload.get("channel")
        self.expiryTime: Optional[int] = deserialize.integer(payload.get("expiryTime"))
        self.maxTrials: Optional[int] = deserialize.integer(payload.get("maxTrials"))
        self.maxControls: Optional[int] = deserialize.integer(payload.get("maxControls"))
        self.paymentInfo: Optional[str] = payload.get("paymentInfo")
        self.trials: Optional[List[str]] = payload.get("trials")
        self.dateCreated: Optional[datetime] = deserialize.iso8601_datetime(payload.get("dateCreated"))
        self.dateUpdated: Optional[datetime] = deserialize.iso8601_datetime(payload.get("dateUpdated"))

        
        self._solution = { 
            "configuration_id": configuration_id,
            "authentication_id": authentication_id or self.authenticationId,
        }
        self._context: Optional[AuthenticationItemContext] = None

    @property
    def _proxy(self) -> "AuthenticationItemContext":
        """
        Generate an instance context for the instance, the context is capable of
        performing various actions. All instance actions are proxied to the context

        :returns: AuthenticationItemContext for this AuthenticationItemInstance
        """
        if self._context is None:
            self._context = AuthenticationItemContext(self._version, configuration_id=self._solution['configuration_id'], authentication_id=self._solution['authentication_id'],)
        return self._context
    
    
    def fetch(self) -> "AuthenticationItemInstance":
        """
        Fetch the AuthenticationItemInstance
        

        :returns: The fetched AuthenticationItemInstance
        """
        return self._proxy.fetch()

    async def fetch_async(self) -> "AuthenticationItemInstance":
        """
        Asynchronous coroutine to fetch the AuthenticationItemInstance
        

        :returns: The fetched AuthenticationItemInstance
        """
        return await self._proxy.fetch_async()
    
    
    def update(self, status: str) -> "AuthenticationItemInstance":
        """
        Update the AuthenticationItemInstance
        
        :param status: The new status of the authentication.

        :returns: The updated AuthenticationItemInstance
        """
        return self._proxy.update(status=status, )

    async def update_async(self, status: str) -> "AuthenticationItemInstance":
        """
        Asynchronous coroutine to update the AuthenticationItemInstance
        
        :param status: The new status of the authentication.

        :returns: The updated AuthenticationItemInstance
        """
        return await self._proxy.update_async(status=status, )
    
    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._solution.items())
        return '<Reach.Api.Authentix.AuthenticationItemInstance {}>'.format(context)

    def __str__(self) -> str:
        """
        Provide a str representation

        :returns: str representation
        """
        repr = { 
            'appletId': self.appletId,
            'apiVersion': self.apiVersion,
            'configurationId': self.configurationId,
            'authenticationId': self.authenticationId,
            'status': self.status,
            'dest': self.dest,
            'channel': self.channel,
            'expiryTime': self.expiryTime,
            'maxTrials': self.maxTrials,
            'maxControls': self.maxControls,
            'paymentInfo': self.paymentInfo,
            'trials': self.trials,
            'dateCreated': self.dateCreated,
            'dateUpdated': self.dateUpdated,
        }
        return serialize.serialize(repr)

class AuthenticationItemContext(InstanceContext):

    def __init__(self, version: Version, configuration_id: str, authentication_id: str):
        """
        Initialize the AuthenticationItemContext

        :param version: Version that contains the resource
        :param configuration_id: The identifier of the configuration being used.
        :param authentication_id: The identifier of the authentication to be updated.
        """
        super().__init__(version)

        
        # Path Solution
        self._solution = { 
            'configuration_id': configuration_id,
            'authentication_id': authentication_id,
        }
        
        
        self._uri = '/authentix/v1/configurations/{configuration_id}/authentications/{authentication_id}'.format(**self._solution)
        
        
    
    
    def fetch(self) -> AuthenticationItemInstance:
        """
        Fetch the AuthenticationItemInstance
        

        :returns: The fetched AuthenticationItemInstance
        """
        
        payload = self._version.fetch(method='GET', uri=self._uri, )

        return AuthenticationItemInstance(
            self._version,
            payload,
            configuration_id=self._solution['configuration_id'],
            authentication_id=self._solution['authentication_id'],
            
        )

    async def fetch_async(self) -> AuthenticationItemInstance:
        """
        Asynchronous coroutine to fetch the AuthenticationItemInstance
        

        :returns: The fetched AuthenticationItemInstance
        """
        
        payload = await self._version.fetch_async(method='GET', uri=self._uri, )

        return AuthenticationItemInstance(
            self._version,
            payload,
            configuration_id=self._solution['configuration_id'],
            authentication_id=self._solution['authentication_id'],
            
        )
    
    
    def update(self, status: str) -> AuthenticationItemInstance:
        """
        Update the AuthenticationItemInstance
        
        :param status: The new status of the authentication.

        :returns: The updated AuthenticationItemInstance
        """
        data = values.of({ 
            'status': status,
        })
        

        payload = self._version.update(method='POST', uri=self._uri, data=data,)

        return AuthenticationItemInstance(
            self._version,
            payload,
            configuration_id=self._solution['configuration_id'],
            authentication_id=self._solution['authentication_id']
        )

    async def update_async(self, status: str) -> AuthenticationItemInstance:
        """
        Asynchronous coroutine to update the AuthenticationItemInstance
        
        :param status: The new status of the authentication.

        :returns: The updated AuthenticationItemInstance
        """
        data = values.of({ 
            'status': status,
        })
        

        payload = await self._version.update_async(method='POST', uri=self._uri, data=data,)

        return AuthenticationItemInstance(
            self._version,
            payload,
            configuration_id=self._solution['configuration_id'],
            authentication_id=self._solution['authentication_id']
        )
    
    
    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._solution.items())
        return '<Reach.Api.Authentix.AuthenticationItemContext {}>'.format(context)







class AuthenticationItemPage(Page):

    def get_instance(self, payload: Dict[str, Any]) -> AuthenticationItemInstance:
        """
        Build an instance of AuthenticationItemInstance

        :param payload: Payload response from the API
        """
        return AuthenticationItemInstance(self._version, payload, configuration_id=self._solution["configuration_id"])

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        return "<Reach.Api.Authentix.AuthenticationItemPage>"







class AuthenticationItemList(ListResource):

    def __init__(self, version: Version, configuration_id: str):
        """
        Initialize the AuthenticationItemList

        :param version: Version that contains the resource
        :param configuration_id: The identifier of the configuration being used.
        
        """
        super().__init__(version)

        
        # Path Solution
        self._solution = { 'configuration_id': configuration_id,  }
        
        self._uri = '/authentix/v1/configurations/{configuration_id}/authentications'.format(**self._solution)
        
        
        
    
    
    
    def stream(self, 
        
        limit: Optional[int] = None,
        page_size: Optional[int] = None,
    ) -> Iterator[AuthenticationItemInstance]:
        """
        Streams AuthenticationItemInstance records from the API as a generator stream.
        This operation lazily loads records as efficiently as possible until the limit
        is reached.
        The results are returned as a generator, so this operation is memory efficient.
        
        :param limit: Upper limit for the number of records to return. stream()
                      guarantees to never return more than limit.  Default is no limit
        :param page_size: Number of records to fetch per request, when not set will use
                          the default value of 50 records.  If no page_size is defined
                          but a limit is defined, stream() will attempt to read the
                          limit with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        """
        limits = self._version.read_limits(limit, page_size)
        page = self.page(
            page_size=limits['page_size']
        )

        return self._version.stream(page, limits['limit'])

    async def stream_async(self, 
        
        limit: Optional[int] = None,
        page_size: Optional[int] = None,
    ) -> AsyncIterator[AuthenticationItemInstance]:
        """
        Asynchronously streams AuthenticationItemInstance records from the API as a generator stream.
        This operation lazily loads records as efficiently as possible until the limit
        is reached.
        The results are returned as a generator, so this operation is memory efficient.
        
        :param limit: Upper limit for the number of records to return. stream()
                      guarantees to never return more than limit.  Default is no limit
        :param page_size: Number of records to fetch per request, when not set will use
                          the default value of 50 records.  If no page_size is defined
                          but a limit is defined, stream() will attempt to read the
                          limit with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        """
        limits = self._version.read_limits(limit, page_size)
        page = await self.page_async(
            page_size=limits['page_size']
        )

        return self._version.stream_async(page, limits['limit'])

    def list(self, 
        
        limit: Optional[int] = None,
        page_size: Optional[int] = None,
    ) -> List[AuthenticationItemInstance]:
        """
        Lists AuthenticationItemInstance records from the API as a list.
        Unlike stream(), this operation is eager and will load `limit` records into
        memory before returning.
        
        :param limit: Upper limit for the number of records to return. list() guarantees
                      never to return more than limit.  Default is no limit
        :param page_size: Number of records to fetch per request, when not set will use
                          the default value of 50 records.  If no page_size is defined
                          but a limit is defined, list() will attempt to read the limit
                          with the most efficient page size, i.e. min(limit, 1000)

        :returns: list that will contain up to limit results
        """
        return list(self.stream(
            limit=limit,
            page_size=page_size,
        ))

    async def list_async(self, 
        
        limit: Optional[int] = None,
        page_size: Optional[int] = None,
    ) -> List[AuthenticationItemInstance]:
        """
        Asynchronously lists AuthenticationItemInstance records from the API as a list.
        Unlike stream(), this operation is eager and will load `limit` records into
        memory before returning.
        
        :param limit: Upper limit for the number of records to return. list() guarantees
                      never to return more than limit.  Default is no limit
        :param page_size: Number of records to fetch per request, when not set will use
                          the default value of 50 records.  If no page_size is defined
                          but a limit is defined, list() will attempt to read the limit
                          with the most efficient page size, i.e. min(limit, 1000)

        :returns: list that will contain up to limit results
        """
        return [record async for record in await self.stream_async(
            limit=limit,
            page_size=page_size,
        )]

    def page(self, 
        
        page_number: Union[int, object] = values.unset,
        page_size: Union[int, object] = values.unset,
    ) -> AuthenticationItemPage:
        """
        Retrieve a single page of AuthenticationItemInstance records from the API.
        Request is executed immediately
        
        :param page_number: Page Number, this value is simply for client state
        :param page_size: Number of records to return, defaults to 20

        :returns: Page of AuthenticationItemInstance
        """
        data = values.of({ 
            'page': page_number,
            'pageSize': page_size,
        })

        baseUrl = self._version.absolute_url(uri=self._uri)
        baseUrl = self._version.url_without_pagination_info(baseUrl, params=data)
        response = self._version.page(method='GET', uri=self._uri, params=data)
        return AuthenticationItemPage(baseUrl, self._version, response, self._solution)

    async def page_async(self, 
        
        page_number: Union[int, object] = values.unset,
        page_size: Union[int, object] = values.unset,
    ) -> AuthenticationItemPage:
        """
        Asynchronously retrieve a single page of AuthenticationItemInstance records from the API.
        Request is executed immediately
        
        :param page_number: Page Number, this value is simply for client state
        :param page_size: Number of records to return, defaults to 20

        :returns: Page of AuthenticationItemInstance
        """
        data = values.of({ 
            'page': page_number,
            'pageSize': page_size,
        })

        baseUrl = self._version.absolute_url(uri=self._uri)
        baseUrl = self._version.url_without_pagination_info(baseUrl, params=data)
        response = await self._version.page_async(method='GET', uri=self._uri, params=data)
        return AuthenticationItemPage(baseUrl, self._version, response, self._solution)

    def get_page(self, target_url: str) -> AuthenticationItemPage:
        """
        Retrieve a specific page of AuthenticationItemInstance records from the API.
        Request is executed immediately

        :param target_url: API-generated URL for the requested results page

        :returns: Page of AuthenticationItemInstance
        """
        baseUrl = self._version.url_without_pagination_info(target_url)
        response = self._version.domain.reach.request(
            'GET',
            target_url
        )
        return AuthenticationItemPage(baseUrl, self._version, response, self._solution)

    async def get_page_async(self, target_url: str) -> AuthenticationItemPage:
        """
        Asynchronously retrieve a specific page of AuthenticationItemInstance records from the API.
        Request is executed immediately

        :param target_url: API-generated URL for the requested results page

        :returns: Page of AuthenticationItemInstance
        """
        baseUrl = self._version.url_without_pagination_info(target_url)
        response = await self._version.domain.reach.request_async(
            'GET',
            target_url
        )
        return AuthenticationItemPage(baseUrl, self._version, response, self._solution)

    
    def start(self, dest: str, channel: str, service_name: Union[str, object]=values.unset, custom_code: Union[str, object]=values.unset, payment_info: Union[str, object]=values.unset, template_id: Union[str, object]=values.unset, template_data_map: Union[str, object]=values.unset) -> AuthenticationItemInstance:
        """
        Start the AuthenticationItemInstance

        :param dest: The phone number or email where to send the authentication code. Phone numbers must be in E.164 format.
        :param channel: The channel by which the authentication code is sent.
        :param service_name: a service name overwriting the one defined in the configuration.
        :param custom_code: the pre-generated code to be sent. Its length should be between 4 and 10 inclusive.
        :param payment_info: Information related to the digital payment to authenticate. It is required when `usedForDigitalPayment` is true. It is ignored otherwise. It is a stringfied JSON map where keys are `payee`, `amount`, and `currency` and the associated values are respectively the payee, the amount, and the currency of a financial transaction. 
        :param template_id: This is the ID of the message template to use for sending the authenetication code. It could be an sms or email template depending on the channel being used. It overwirites the template ID defined in the configuration if any. 
        :param template_data_map: A stringfied JSON map where keys are message template parameters and the values are the parameter values to be used when sending the authentication code. It may also be used to provide additional parameters for sending email based authentications such as the email used for sending the code.
        
        :returns: The started AuthenticationItemInstance
        """
        data = values.of({ 
            'dest': dest,
            'channel': channel,
            'serviceName': service_name,
            'customCode': custom_code,
            'paymentInfo': payment_info,
            'templateId': template_id,
            'templateDataMap': template_data_map,
        })
        
        payload = self._version.start(method='POST', uri=self._uri, data=data,)

        return AuthenticationItemInstance(self._version, payload, configuration_id=self._solution['configuration_id'])

    async def start_async(self, dest: str, channel: str, service_name: Union[str, object]=values.unset, custom_code: Union[str, object]=values.unset, payment_info: Union[str, object]=values.unset, template_id: Union[str, object]=values.unset, template_data_map: Union[str, object]=values.unset) -> AuthenticationItemInstance:
        """
        Asynchronously start the AuthenticationItemInstance

        :param dest: The phone number or email where to send the authentication code. Phone numbers must be in E.164 format.
        :param channel: The channel by which the authentication code is sent.
        :param service_name: a service name overwriting the one defined in the configuration.
        :param custom_code: the pre-generated code to be sent. Its length should be between 4 and 10 inclusive.
        :param payment_info: Information related to the digital payment to authenticate. It is required when `usedForDigitalPayment` is true. It is ignored otherwise. It is a stringfied JSON map where keys are `payee`, `amount`, and `currency` and the associated values are respectively the payee, the amount, and the currency of a financial transaction. 
        :param template_id: This is the ID of the message template to use for sending the authenetication code. It could be an sms or email template depending on the channel being used. It overwirites the template ID defined in the configuration if any. 
        :param template_data_map: A stringfied JSON map where keys are message template parameters and the values are the parameter values to be used when sending the authentication code. It may also be used to provide additional parameters for sending email based authentications such as the email used for sending the code.
        
        :returns: The started AuthenticationItemInstance
        """
        data = values.of({ 
            'dest': dest,
            'channel': channel,
            'serviceName': service_name,
            'customCode': custom_code,
            'paymentInfo': payment_info,
            'templateId': template_id,
            'templateDataMap': template_data_map,
        })
        
        payload = await self._version.start_async(method='POST', uri=self._uri, data=data,)

        return AuthenticationItemInstance(self._version, payload, configuration_id=self._solution['configuration_id'])
    


    def get(self, authentication_id: str) -> AuthenticationItemContext:
        """
        Constructs a AuthenticationItemContext
        
        :param authentication_id: The identifier of the authentication to be updated.
        """
        return AuthenticationItemContext(self._version, configuration_id=self._solution['configuration_id'], authentication_id=authentication_id)

    def __call__(self, authentication_id: str) -> AuthenticationItemContext:
        """
        Constructs a AuthenticationItemContext
        
        :param authentication_id: The identifier of the authentication to be updated.
        """
        return AuthenticationItemContext(self._version, configuration_id=self._solution['configuration_id'], authentication_id=authentication_id)

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        return '<Reach.Api.Authentix.AuthenticationItemList>'

