r"""
    This code was generated by
  ___ ___   _   ___ _  _    _____ _   _    _  ___   ___      _   ___ ___      ___   _   ___     ___ ___ _  _ ___ ___    _ _____ ___  ___ 
 | _ \ __| /_\ / __| || |__|_   _/_\ | |  | |/ | \ / / |    /_\ | _ ) __|___ / _ \ /_\ |_ _|__ / __| __| \| | __| _ \  /_\_   _/ _ \| _ \
 |   / _| / _ \ (__| __ |___|| |/ _ \| |__| ' < \ V /| |__ / _ \| _ \__ \___| (_) / _ \ | |___| (_ | _|| .` | _||   / / _ \| || (_) |   /
 |_|_\___/_/ \_\___|_||_|    |_/_/ \_\____|_|\_\ |_| |____/_/ \_\___/___/    \___/_/ \_\___|   \___|___|_|\_|___|_|_\/_/ \_\_| \___/|_|_\
 
    Reach Authentix API
     Reach Authentix API helps you easily integrate user authentification in your application. The authentification allows to verify that a user is indeed at the origin of a request from your application.  At the moment, the Reach Authentix API supports the following channels:    * SMS      * Email   We are continuously working to add additionnal channels. ## Base URL All endpoints described in this documentation are relative to the following base URL: ``` https://api.reach.talkylabs.com/rest/authentix/v1/ ```  The API is provided over HTTPS protocol to ensure data privacy.  ## API Authentication Requests made to the API must be authenticated. You need to provide the `ApiUser` and `ApiKey` associated with your applet. This information could be found in the settings of the applet. ```curl curl -X GET [BASE_URL]/configurations -H \"ApiUser:[Your_Api_User]\" -H \"ApiKey:[Your_Api_Key]\" ``` ## Reach Authentix API Workflow Three steps are needed in order to authenticate a given user using the Reach Authentix API. ### Step 1: Create an Authentix configuration A configuration is a set of settings used to define and send an authentication code to a user. This includes, for example: ```   - the length of the authentication code,    - the message template,    - and so on... ``` A configuaration could be created via the web application or directly using the Reach Authentix API. This step does not need to be performed every time one wants to use the Reach Authentix API. Indeed, once created, a configuartion could be used to authenticate several users in the future.    ### Step 2: Send an authentication code A configuration is used to send an authentication code via a selected channel to a user. For now, the supported channels are `sms`, and `email`. We are working hard to support additional channels. Newly created authentications will have a status of `awaiting`. ### Step 3: Verify the authentication code This step allows to verify that the code submitted by the user matched the one sent previously. If, there is a match, then the status of the authentication changes from `awaiting` to `passed`. Otherwise, the status remains `awaiting` until either it is verified or it expires. In the latter case, the status becomes `expired`. 

    NOTE: This class is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
    Do not edit the class manually.
"""


from datetime import date, datetime
from decimal import Decimal
from typing import Any, Dict, List, Optional, Union, Iterator, AsyncIterator
from talkylabs.reach.base import deserialize, serialize, values
from talkylabs.reach.base.instance_context import InstanceContext
from talkylabs.reach.base.instance_resource import InstanceResource
from talkylabs.reach.base.list_resource import ListResource
from talkylabs.reach.base.version import Version
from talkylabs.reach.base.page import Page


class AuthenticationTrialItemInstance(InstanceResource):

    """
    :ivar appletId: The identifier of the applet.
    :ivar apiVersion: The API version.
    :ivar configurationId: The identifier of the configuration.
    :ivar authenticationId: The identifier of the authentication.
    :ivar trialId: The identifier of the authentication trial.
    :ivar trialStatus: The status of the authentication.
    :ivar channel: The channel used.
    :ivar paymentInfo: 
    :ivar dateCreated: The date and time in GMT that the authentication trial was created. 
    :ivar dateUpdated: The date and time in GMT that the authentication trial was last updated. 
    :ivar price: The cost billed for the authentication trial, in the currency specified by `priceUnit`. This cost does not include the cost for checking the correctness of the code.
    :ivar priceUnit: The currency, in ISO 4127 format, in which price is measured. for example, usd, xaf, eur, cad.
    :ivar channelInfo: channel specific information related to a trial.
    """

    def __init__(self, version: Version, payload: Dict[str, Any], trial_id: Optional[str] = None):
        super().__init__(version)

        
        self.appletId: Optional[str] = payload.get("appletId")
        self.apiVersion: Optional[str] = payload.get("apiVersion")
        self.configurationId: Optional[str] = payload.get("configurationId")
        self.authenticationId: Optional[str] = payload.get("authenticationId")
        self.trialId: Optional[str] = payload.get("trialId")
        self.trialStatus: Optional[str] = payload.get("trialStatus")
        self.channel: Optional[str] = payload.get("channel")
        self.paymentInfo: Optional[str] = payload.get("paymentInfo")
        self.dateCreated: Optional[datetime] = deserialize.iso8601_datetime(payload.get("dateCreated"))
        self.dateUpdated: Optional[datetime] = deserialize.iso8601_datetime(payload.get("dateUpdated"))
        self.price: Optional[float] = deserialize.decimal(payload.get("price"))
        self.priceUnit: Optional[str] = payload.get("priceUnit")
        self.channelInfo: Optional[dict(str, object)] = payload.get("channelInfo")

        
        self._solution = { 
            "trial_id": trial_id or self.trialId,
        }
        self._context: Optional[AuthenticationTrialItemContext] = None

    @property
    def _proxy(self) -> "AuthenticationTrialItemContext":
        """
        Generate an instance context for the instance, the context is capable of
        performing various actions. All instance actions are proxied to the context

        :returns: AuthenticationTrialItemContext for this AuthenticationTrialItemInstance
        """
        if self._context is None:
            self._context = AuthenticationTrialItemContext(self._version, trial_id=self._solution['trial_id'],)
        return self._context
    
    
    def fetch(self) -> "AuthenticationTrialItemInstance":
        """
        Fetch the AuthenticationTrialItemInstance
        

        :returns: The fetched AuthenticationTrialItemInstance
        """
        return self._proxy.fetch()

    async def fetch_async(self) -> "AuthenticationTrialItemInstance":
        """
        Asynchronous coroutine to fetch the AuthenticationTrialItemInstance
        

        :returns: The fetched AuthenticationTrialItemInstance
        """
        return await self._proxy.fetch_async()
    
    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._solution.items())
        return '<Reach.Api.Authentix.AuthenticationTrialItemInstance {}>'.format(context)

    def __str__(self) -> str:
        """
        Provide a str representation

        :returns: str representation
        """
        repr = { 
            'appletId': self.appletId,
            'apiVersion': self.apiVersion,
            'configurationId': self.configurationId,
            'authenticationId': self.authenticationId,
            'trialId': self.trialId,
            'trialStatus': self.trialStatus,
            'channel': self.channel,
            'paymentInfo': self.paymentInfo,
            'dateCreated': self.dateCreated,
            'dateUpdated': self.dateUpdated,
            'price': self.price,
            'priceUnit': self.priceUnit,
            'channelInfo': self.channelInfo,
        }
        return serialize.serialize(repr)

class AuthenticationTrialItemContext(InstanceContext):

    def __init__(self, version: Version, trial_id: str):
        """
        Initialize the AuthenticationTrialItemContext

        :param version: Version that contains the resource
        :param trial_id: The identifier of the authentication trial to be fetched.
        """
        super().__init__(version)

        
        # Path Solution
        self._solution = { 
            'trial_id': trial_id,
        }
        
        
        self._uri = '/authentix/v1/authenticationTrials/{trial_id}'.format(**self._solution)
        
        
    
    
    def fetch(self) -> AuthenticationTrialItemInstance:
        """
        Fetch the AuthenticationTrialItemInstance
        

        :returns: The fetched AuthenticationTrialItemInstance
        """
        
        payload = self._version.fetch(method='GET', uri=self._uri, )

        return AuthenticationTrialItemInstance(
            self._version,
            payload,
            trial_id=self._solution['trial_id'],
            
        )

    async def fetch_async(self) -> AuthenticationTrialItemInstance:
        """
        Asynchronous coroutine to fetch the AuthenticationTrialItemInstance
        

        :returns: The fetched AuthenticationTrialItemInstance
        """
        
        payload = await self._version.fetch_async(method='GET', uri=self._uri, )

        return AuthenticationTrialItemInstance(
            self._version,
            payload,
            trial_id=self._solution['trial_id'],
            
        )
    
    
    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._solution.items())
        return '<Reach.Api.Authentix.AuthenticationTrialItemContext {}>'.format(context)





class AuthenticationTrialItemPage(Page):

    def get_instance(self, payload: Dict[str, Any]) -> AuthenticationTrialItemInstance:
        """
        Build an instance of AuthenticationTrialItemInstance

        :param payload: Payload response from the API
        """
        return AuthenticationTrialItemInstance(self._version, payload)

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        return "<Reach.Api.Authentix.AuthenticationTrialItemPage>"





class AuthenticationTrialItemList(ListResource):

    def __init__(self, version: Version):
        """
        Initialize the AuthenticationTrialItemList

        :param version: Version that contains the resource
        
        """
        super().__init__(version)

        
        
        self._uri = '/authentix/v1/authenticationTrials'
        
        
        
    
    
    def stream(self, 
        dest: Union[str, object] = values.unset,
        trial_status: Union[str, object] = values.unset,
        channel: Union[str, object] = values.unset,
        configuration_id: Union[str, object] = values.unset,
        authentication_id: Union[str, object] = values.unset,
        country: Union[str, object] = values.unset,
        sent_at: Union[datetime, object] = values.unset,
        sent_after: Union[datetime, object] = values.unset,
        sent_before: Union[datetime, object] = values.unset,
        
        limit: Optional[int] = None,
        page_size: Optional[int] = None,
    ) -> Iterator[AuthenticationTrialItemInstance]:
        """
        Streams AuthenticationTrialItemInstance records from the API as a generator stream.
        This operation lazily loads records as efficiently as possible until the limit
        is reached.
        The results are returned as a generator, so this operation is memory efficient.
        
        :param str dest: Retrieve authentication trials sent only to this phone number or email. The phone number must be in the E.164 format.
        :param str trial_status: Retrieve authentication trials with the specified status.
        :param str channel: Retrieve authentication trials sent via the specified channel.
        :param str configuration_id: Retrieve authentication trials from the configuration whose ID matches the specified one.
        :param str authentication_id: Retrieve authentication trials from the authentication whose ID matches the specified one.
        :param str country: Retrieve authentication trials sent to the specified destination country (in ISO 3166-1 alpha-2). Only possible when `dest` is a phone number.
        :param datetime sent_at: Retrieve only authentication trials created at the specified date. Must be in ISO 8601 format.
        :param datetime sent_after: Retrieve only authentication trials created after the specified datetime. Must be in ISO 8601 format.
        :param datetime sent_before: Retrieve only authentication trials created before the specified datetime. Must be in ISO 8601 format.
        :param limit: Upper limit for the number of records to return. stream()
                      guarantees to never return more than limit.  Default is no limit
        :param page_size: Number of records to fetch per request, when not set will use
                          the default value of 50 records.  If no page_size is defined
                          but a limit is defined, stream() will attempt to read the
                          limit with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        """
        limits = self._version.read_limits(limit, page_size)
        page = self.page(
            dest=dest,
            trial_status=trial_status,
            channel=channel,
            configuration_id=configuration_id,
            authentication_id=authentication_id,
            country=country,
            sent_at=sent_at,
            sent_after=sent_after,
            sent_before=sent_before,
            page_size=limits['page_size']
        )

        return self._version.stream(page, limits['limit'])

    async def stream_async(self, 
        dest: Union[str, object] = values.unset,
        trial_status: Union[str, object] = values.unset,
        channel: Union[str, object] = values.unset,
        configuration_id: Union[str, object] = values.unset,
        authentication_id: Union[str, object] = values.unset,
        country: Union[str, object] = values.unset,
        sent_at: Union[datetime, object] = values.unset,
        sent_after: Union[datetime, object] = values.unset,
        sent_before: Union[datetime, object] = values.unset,
        
        limit: Optional[int] = None,
        page_size: Optional[int] = None,
    ) -> AsyncIterator[AuthenticationTrialItemInstance]:
        """
        Asynchronously streams AuthenticationTrialItemInstance records from the API as a generator stream.
        This operation lazily loads records as efficiently as possible until the limit
        is reached.
        The results are returned as a generator, so this operation is memory efficient.
        
        :param str dest: Retrieve authentication trials sent only to this phone number or email. The phone number must be in the E.164 format.
        :param str trial_status: Retrieve authentication trials with the specified status.
        :param str channel: Retrieve authentication trials sent via the specified channel.
        :param str configuration_id: Retrieve authentication trials from the configuration whose ID matches the specified one.
        :param str authentication_id: Retrieve authentication trials from the authentication whose ID matches the specified one.
        :param str country: Retrieve authentication trials sent to the specified destination country (in ISO 3166-1 alpha-2). Only possible when `dest` is a phone number.
        :param datetime sent_at: Retrieve only authentication trials created at the specified date. Must be in ISO 8601 format.
        :param datetime sent_after: Retrieve only authentication trials created after the specified datetime. Must be in ISO 8601 format.
        :param datetime sent_before: Retrieve only authentication trials created before the specified datetime. Must be in ISO 8601 format.
        :param limit: Upper limit for the number of records to return. stream()
                      guarantees to never return more than limit.  Default is no limit
        :param page_size: Number of records to fetch per request, when not set will use
                          the default value of 50 records.  If no page_size is defined
                          but a limit is defined, stream() will attempt to read the
                          limit with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        """
        limits = self._version.read_limits(limit, page_size)
        page = await self.page_async(
            dest=dest,
            trial_status=trial_status,
            channel=channel,
            configuration_id=configuration_id,
            authentication_id=authentication_id,
            country=country,
            sent_at=sent_at,
            sent_after=sent_after,
            sent_before=sent_before,
            page_size=limits['page_size']
        )

        return self._version.stream_async(page, limits['limit'])

    def list(self, 
        dest: Union[str, object] = values.unset,
        trial_status: Union[str, object] = values.unset,
        channel: Union[str, object] = values.unset,
        configuration_id: Union[str, object] = values.unset,
        authentication_id: Union[str, object] = values.unset,
        country: Union[str, object] = values.unset,
        sent_at: Union[datetime, object] = values.unset,
        sent_after: Union[datetime, object] = values.unset,
        sent_before: Union[datetime, object] = values.unset,
        
        limit: Optional[int] = None,
        page_size: Optional[int] = None,
    ) -> List[AuthenticationTrialItemInstance]:
        """
        Lists AuthenticationTrialItemInstance records from the API as a list.
        Unlike stream(), this operation is eager and will load `limit` records into
        memory before returning.
        
        :param str dest: Retrieve authentication trials sent only to this phone number or email. The phone number must be in the E.164 format.
        :param str trial_status: Retrieve authentication trials with the specified status.
        :param str channel: Retrieve authentication trials sent via the specified channel.
        :param str configuration_id: Retrieve authentication trials from the configuration whose ID matches the specified one.
        :param str authentication_id: Retrieve authentication trials from the authentication whose ID matches the specified one.
        :param str country: Retrieve authentication trials sent to the specified destination country (in ISO 3166-1 alpha-2). Only possible when `dest` is a phone number.
        :param datetime sent_at: Retrieve only authentication trials created at the specified date. Must be in ISO 8601 format.
        :param datetime sent_after: Retrieve only authentication trials created after the specified datetime. Must be in ISO 8601 format.
        :param datetime sent_before: Retrieve only authentication trials created before the specified datetime. Must be in ISO 8601 format.
        :param limit: Upper limit for the number of records to return. list() guarantees
                      never to return more than limit.  Default is no limit
        :param page_size: Number of records to fetch per request, when not set will use
                          the default value of 50 records.  If no page_size is defined
                          but a limit is defined, list() will attempt to read the limit
                          with the most efficient page size, i.e. min(limit, 1000)

        :returns: list that will contain up to limit results
        """
        return list(self.stream(
            dest=dest,
            trial_status=trial_status,
            channel=channel,
            configuration_id=configuration_id,
            authentication_id=authentication_id,
            country=country,
            sent_at=sent_at,
            sent_after=sent_after,
            sent_before=sent_before,
            limit=limit,
            page_size=page_size,
        ))

    async def list_async(self, 
        dest: Union[str, object] = values.unset,
        trial_status: Union[str, object] = values.unset,
        channel: Union[str, object] = values.unset,
        configuration_id: Union[str, object] = values.unset,
        authentication_id: Union[str, object] = values.unset,
        country: Union[str, object] = values.unset,
        sent_at: Union[datetime, object] = values.unset,
        sent_after: Union[datetime, object] = values.unset,
        sent_before: Union[datetime, object] = values.unset,
        
        limit: Optional[int] = None,
        page_size: Optional[int] = None,
    ) -> List[AuthenticationTrialItemInstance]:
        """
        Asynchronously lists AuthenticationTrialItemInstance records from the API as a list.
        Unlike stream(), this operation is eager and will load `limit` records into
        memory before returning.
        
        :param str dest: Retrieve authentication trials sent only to this phone number or email. The phone number must be in the E.164 format.
        :param str trial_status: Retrieve authentication trials with the specified status.
        :param str channel: Retrieve authentication trials sent via the specified channel.
        :param str configuration_id: Retrieve authentication trials from the configuration whose ID matches the specified one.
        :param str authentication_id: Retrieve authentication trials from the authentication whose ID matches the specified one.
        :param str country: Retrieve authentication trials sent to the specified destination country (in ISO 3166-1 alpha-2). Only possible when `dest` is a phone number.
        :param datetime sent_at: Retrieve only authentication trials created at the specified date. Must be in ISO 8601 format.
        :param datetime sent_after: Retrieve only authentication trials created after the specified datetime. Must be in ISO 8601 format.
        :param datetime sent_before: Retrieve only authentication trials created before the specified datetime. Must be in ISO 8601 format.
        :param limit: Upper limit for the number of records to return. list() guarantees
                      never to return more than limit.  Default is no limit
        :param page_size: Number of records to fetch per request, when not set will use
                          the default value of 50 records.  If no page_size is defined
                          but a limit is defined, list() will attempt to read the limit
                          with the most efficient page size, i.e. min(limit, 1000)

        :returns: list that will contain up to limit results
        """
        return [record async for record in await self.stream_async(
            dest=dest,
            trial_status=trial_status,
            channel=channel,
            configuration_id=configuration_id,
            authentication_id=authentication_id,
            country=country,
            sent_at=sent_at,
            sent_after=sent_after,
            sent_before=sent_before,
            limit=limit,
            page_size=page_size,
        )]

    def page(self, 
        dest: Union[str, object] = values.unset,
        trial_status: Union[str, object] = values.unset,
        channel: Union[str, object] = values.unset,
        configuration_id: Union[str, object] = values.unset,
        authentication_id: Union[str, object] = values.unset,
        country: Union[str, object] = values.unset,
        sent_at: Union[datetime, object] = values.unset,
        sent_after: Union[datetime, object] = values.unset,
        sent_before: Union[datetime, object] = values.unset,
        
        page_number: Union[int, object] = values.unset,
        page_size: Union[int, object] = values.unset,
    ) -> AuthenticationTrialItemPage:
        """
        Retrieve a single page of AuthenticationTrialItemInstance records from the API.
        Request is executed immediately
        
        :param dest: Retrieve authentication trials sent only to this phone number or email. The phone number must be in the E.164 format.
        :param trial_status: Retrieve authentication trials with the specified status.
        :param channel: Retrieve authentication trials sent via the specified channel.
        :param configuration_id: Retrieve authentication trials from the configuration whose ID matches the specified one.
        :param authentication_id: Retrieve authentication trials from the authentication whose ID matches the specified one.
        :param country: Retrieve authentication trials sent to the specified destination country (in ISO 3166-1 alpha-2). Only possible when `dest` is a phone number.
        :param sent_at: Retrieve only authentication trials created at the specified date. Must be in ISO 8601 format.
        :param sent_after: Retrieve only authentication trials created after the specified datetime. Must be in ISO 8601 format.
        :param sent_before: Retrieve only authentication trials created before the specified datetime. Must be in ISO 8601 format.
        :param page_number: Page Number, this value is simply for client state
        :param page_size: Number of records to return, defaults to 20

        :returns: Page of AuthenticationTrialItemInstance
        """
        data = values.of({ 
            'dest': dest,
            'trialStatus': trial_status,
            'channel': channel,
            'configurationId': configuration_id,
            'authenticationId': authentication_id,
            'country': country,
            'sentAt': serialize.iso8601_datetime(sent_at),
            'sentAfter': serialize.iso8601_datetime(sent_after),
            'sentBefore': serialize.iso8601_datetime(sent_before),
            'page': page_number,
            'pageSize': page_size,
        })

        baseUrl = self._version.absolute_url(uri=self._uri)
        baseUrl = self._version.url_without_pagination_info(baseUrl, params=data)
        response = self._version.page(method='GET', uri=self._uri, params=data)
        return AuthenticationTrialItemPage(baseUrl, self._version, response)

    async def page_async(self, 
        dest: Union[str, object] = values.unset,
        trial_status: Union[str, object] = values.unset,
        channel: Union[str, object] = values.unset,
        configuration_id: Union[str, object] = values.unset,
        authentication_id: Union[str, object] = values.unset,
        country: Union[str, object] = values.unset,
        sent_at: Union[datetime, object] = values.unset,
        sent_after: Union[datetime, object] = values.unset,
        sent_before: Union[datetime, object] = values.unset,
        
        page_number: Union[int, object] = values.unset,
        page_size: Union[int, object] = values.unset,
    ) -> AuthenticationTrialItemPage:
        """
        Asynchronously retrieve a single page of AuthenticationTrialItemInstance records from the API.
        Request is executed immediately
        
        :param dest: Retrieve authentication trials sent only to this phone number or email. The phone number must be in the E.164 format.
        :param trial_status: Retrieve authentication trials with the specified status.
        :param channel: Retrieve authentication trials sent via the specified channel.
        :param configuration_id: Retrieve authentication trials from the configuration whose ID matches the specified one.
        :param authentication_id: Retrieve authentication trials from the authentication whose ID matches the specified one.
        :param country: Retrieve authentication trials sent to the specified destination country (in ISO 3166-1 alpha-2). Only possible when `dest` is a phone number.
        :param sent_at: Retrieve only authentication trials created at the specified date. Must be in ISO 8601 format.
        :param sent_after: Retrieve only authentication trials created after the specified datetime. Must be in ISO 8601 format.
        :param sent_before: Retrieve only authentication trials created before the specified datetime. Must be in ISO 8601 format.
        :param page_number: Page Number, this value is simply for client state
        :param page_size: Number of records to return, defaults to 20

        :returns: Page of AuthenticationTrialItemInstance
        """
        data = values.of({ 
            'dest': dest,
            'trialStatus': trial_status,
            'channel': channel,
            'configurationId': configuration_id,
            'authenticationId': authentication_id,
            'country': country,
            'sentAt': serialize.iso8601_datetime(sent_at),
            'sentAfter': serialize.iso8601_datetime(sent_after),
            'sentBefore': serialize.iso8601_datetime(sent_before),
            'page': page_number,
            'pageSize': page_size,
        })

        baseUrl = self._version.absolute_url(uri=self._uri)
        baseUrl = self._version.url_without_pagination_info(baseUrl, params=data)
        response = await self._version.page_async(method='GET', uri=self._uri, params=data)
        return AuthenticationTrialItemPage(baseUrl, self._version, response)

    def get_page(self, target_url: str) -> AuthenticationTrialItemPage:
        """
        Retrieve a specific page of AuthenticationTrialItemInstance records from the API.
        Request is executed immediately

        :param target_url: API-generated URL for the requested results page

        :returns: Page of AuthenticationTrialItemInstance
        """
        baseUrl = self._version.url_without_pagination_info(target_url)
        response = self._version.domain.reach.request(
            'GET',
            target_url
        )
        return AuthenticationTrialItemPage(baseUrl, self._version, response)

    async def get_page_async(self, target_url: str) -> AuthenticationTrialItemPage:
        """
        Asynchronously retrieve a specific page of AuthenticationTrialItemInstance records from the API.
        Request is executed immediately

        :param target_url: API-generated URL for the requested results page

        :returns: Page of AuthenticationTrialItemInstance
        """
        baseUrl = self._version.url_without_pagination_info(target_url)
        response = await self._version.domain.reach.request_async(
            'GET',
            target_url
        )
        return AuthenticationTrialItemPage(baseUrl, self._version, response)



    def get(self, trial_id: str) -> AuthenticationTrialItemContext:
        """
        Constructs a AuthenticationTrialItemContext
        
        :param trial_id: The identifier of the authentication trial to be fetched.
        """
        return AuthenticationTrialItemContext(self._version, trial_id=trial_id)

    def __call__(self, trial_id: str) -> AuthenticationTrialItemContext:
        """
        Constructs a AuthenticationTrialItemContext
        
        :param trial_id: The identifier of the authentication trial to be fetched.
        """
        return AuthenticationTrialItemContext(self._version, trial_id=trial_id)

    def __repr__(self) -> str:
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        """
        return '<Reach.Api.Authentix.AuthenticationTrialItemList>'

